/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package home.prijimackytester;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import org.paukov.combinatorics.Factory;
import org.paukov.combinatorics.Generator;
import org.paukov.combinatorics.ICombinatoricsVector;

/**
 *
 * @author Janco1
 */
public class MainForm extends javax.swing.JFrame implements PropertyChangeListener {

    private Database database;
    private List<User> users;
    private DefaultComboBoxModel userComboboxModel;
    private List<Otazka> otazky;
    List<Integer> aktualneUlohy;
    private int aktualnaUloha;
    List<Integer> aktualneOdpovedeMix = new ArrayList<>();
    private boolean ohodnotene;
    private Otazka aktualnaOtazka;
    private int uspesnych;
    private int minusBodov;
    private DecimalFormat df = new DecimalFormat("##.##");
    private String aktUser;
    private User vybranyUser;
    private Color farbaOznacenia = Color.CYAN;
    private boolean beziTrening;
    private int[] povodnaStatistika;
    private StatistikaDialogForm sf;
    ExecutorService es = Executors.newCachedThreadPool();
    Autentifikator autentifikator = new Autentifikator();
    Timer timer;
    private long startTime;
    private int klikY;
    private int klikX;
    private boolean editujeme;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        SpustacDatabazy.execute();
        initComponents();
        this.setLocationRelativeTo(null);
        database = new Database();
        database.addPropertyChangeListener(this);
        // autentifikacia
        Autentifikator.userCountAutentifikacia(database);

        users = database.getUsers();
        otazky = database.getOtazkyListBiologia();
        //database.dbUserAutentifikacia(aktUser);
        refreshUserCombobox();
//        System.out.println("otazky size: " + otazky.size());
//        System.out.println("nacitani useri: \n" + users);
        // init odpovede mix
        for (int i = 0; i < 8; i++) {
            aktualneOdpovedeMix.add(i);
        }
        refreshObrazok();
        cervenyCheckBox.setOpaque(true);
        bielyCheckBox.setOpaque(true);
        zltyCheckBox.setOpaque(true);
        oranzovyCheckBox.setOpaque(true);
        zelenyCheckBox.setOpaque(true);
        znenieOtazkyLabel.setText("Kliknutím na štvorček v obrázku zobrazíte otázku.");
        znenieOtazkyLabel.setBackground(Color.MAGENTA);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        pouzivatelComboBox = new javax.swing.JComboBox();
        pridatPouzivatelaButton = new javax.swing.JButton();
        novyPouzivatelTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        odpoved1CheckBox = new javax.swing.JCheckBox();
        odpoved2CheckBox = new javax.swing.JCheckBox();
        odpoved3CheckBox = new javax.swing.JCheckBox();
        odpoved4CheckBox = new javax.swing.JCheckBox();
        odpoved1CheckBox1 = new javax.swing.JCheckBox();
        odpoved2CheckBox1 = new javax.swing.JCheckBox();
        odpoved3CheckBox1 = new javax.swing.JCheckBox();
        odpoved4CheckBox1 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        odpoved1Label = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        odpoved2Label = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        odpoved3Label = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        odpoved4Label = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        odpoved1Label1 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        odpoved2Label1 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        odpoved3Label1 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        odpoved4Label1 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        znenieOtazkyLabel = new javax.swing.JTextArea();
        dalsiaOtazkaButton = new javax.swing.JButton();
        aktStavLabel = new javax.swing.JLabel();
        grafikaLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ucenieRadioButton = new javax.swing.JRadioButton();
        treningRadioButton = new javax.swing.JRadioButton();
        testRadioButton = new javax.swing.JRadioButton();
        rozsahLabel = new javax.swing.JLabel();
        minRozsahTextField = new javax.swing.JTextField();
        maxRozsahTextField = new javax.swing.JTextField();
        mixCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        uplynuloLabel = new javax.swing.JLabel();
        zostavaLabel = new javax.swing.JLabel();
        predchadzajuciButton = new javax.swing.JButton();
        zacatTreningButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cervenyCheckBox = new javax.swing.JCheckBox();
        bielyCheckBox = new javax.swing.JCheckBox();
        zltyCheckBox = new javax.swing.JCheckBox();
        oranzovyCheckBox = new javax.swing.JCheckBox();
        zelenyCheckBox = new javax.swing.JCheckBox();
        opravitChybuButton = new javax.swing.JButton();
        nacitajProfilButton = new javax.swing.JButton();

        jLabel3.setText("Používateľ:");

        pouzivatelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        pouzivatelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pouzivatelComboBoxActionPerformed(evt);
            }
        });

        pridatPouzivatelaButton.setText("Pridať");
        pridatPouzivatelaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pridatPouzivatelaButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Nový používateľ:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Biológia Test");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        odpoved1CheckBox.setText("a)");
        odpoved1CheckBox.setEnabled(false);
        odpoved1CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved1CheckBoxActionPerformed(evt);
            }
        });

        odpoved2CheckBox.setText("b)");
        odpoved2CheckBox.setEnabled(false);
        odpoved2CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved2CheckBoxActionPerformed(evt);
            }
        });

        odpoved3CheckBox.setText("c)");
        odpoved3CheckBox.setEnabled(false);
        odpoved3CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved3CheckBoxActionPerformed(evt);
            }
        });

        odpoved4CheckBox.setText("d)");
        odpoved4CheckBox.setEnabled(false);
        odpoved4CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved4CheckBoxActionPerformed(evt);
            }
        });

        odpoved1CheckBox1.setText("e)");
        odpoved1CheckBox1.setEnabled(false);
        odpoved1CheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved1CheckBox1ActionPerformed(evt);
            }
        });

        odpoved2CheckBox1.setText("f)");
        odpoved2CheckBox1.setEnabled(false);
        odpoved2CheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved2CheckBox1ActionPerformed(evt);
            }
        });

        odpoved3CheckBox1.setText("g)");
        odpoved3CheckBox1.setEnabled(false);
        odpoved3CheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved3CheckBox1ActionPerformed(evt);
            }
        });

        odpoved4CheckBox1.setText("h)");
        odpoved4CheckBox1.setEnabled(false);
        odpoved4CheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                odpoved4CheckBox1ActionPerformed(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved1Label.setEditable(false);
        odpoved1Label.setColumns(20);
        odpoved1Label.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        odpoved1Label.setLineWrap(true);
        odpoved1Label.setRows(5);
        odpoved1Label.setWrapStyleWord(true);
        odpoved1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved1LabelMouseClicked(evt);
            }
        });
        odpoved1Label.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved1LabelKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(odpoved1Label);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved2Label.setEditable(false);
        odpoved2Label.setColumns(20);
        odpoved2Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved2Label.setLineWrap(true);
        odpoved2Label.setRows(5);
        odpoved2Label.setWrapStyleWord(true);
        odpoved2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved2LabelMouseClicked(evt);
            }
        });
        odpoved2Label.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved2LabelKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(odpoved2Label);

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved3Label.setEditable(false);
        odpoved3Label.setColumns(20);
        odpoved3Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved3Label.setLineWrap(true);
        odpoved3Label.setRows(5);
        odpoved3Label.setWrapStyleWord(true);
        odpoved3Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved3LabelMouseClicked(evt);
            }
        });
        odpoved3Label.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved3LabelKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(odpoved3Label);

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved4Label.setEditable(false);
        odpoved4Label.setColumns(20);
        odpoved4Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved4Label.setLineWrap(true);
        odpoved4Label.setRows(5);
        odpoved4Label.setWrapStyleWord(true);
        odpoved4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved4LabelMouseClicked(evt);
            }
        });
        odpoved4Label.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved4LabelKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(odpoved4Label);

        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved1Label1.setEditable(false);
        odpoved1Label1.setColumns(20);
        odpoved1Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved1Label1.setLineWrap(true);
        odpoved1Label1.setRows(5);
        odpoved1Label1.setWrapStyleWord(true);
        odpoved1Label1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved1Label1MouseClicked(evt);
            }
        });
        odpoved1Label1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved1Label1KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(odpoved1Label1);

        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved2Label1.setEditable(false);
        odpoved2Label1.setColumns(20);
        odpoved2Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved2Label1.setLineWrap(true);
        odpoved2Label1.setRows(5);
        odpoved2Label1.setWrapStyleWord(true);
        odpoved2Label1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved2Label1MouseClicked(evt);
            }
        });
        odpoved2Label1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved2Label1KeyPressed(evt);
            }
        });
        jScrollPane6.setViewportView(odpoved2Label1);

        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved3Label1.setEditable(false);
        odpoved3Label1.setColumns(20);
        odpoved3Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved3Label1.setLineWrap(true);
        odpoved3Label1.setRows(5);
        odpoved3Label1.setWrapStyleWord(true);
        odpoved3Label1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved3Label1MouseClicked(evt);
            }
        });
        odpoved3Label1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved3Label1KeyPressed(evt);
            }
        });
        jScrollPane7.setViewportView(odpoved3Label1);

        jScrollPane8.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        odpoved4Label1.setEditable(false);
        odpoved4Label1.setColumns(20);
        odpoved4Label1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        odpoved4Label1.setLineWrap(true);
        odpoved4Label1.setRows(5);
        odpoved4Label1.setWrapStyleWord(true);
        odpoved4Label1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odpoved4Label1MouseClicked(evt);
            }
        });
        odpoved4Label1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                odpoved4Label1KeyPressed(evt);
            }
        });
        jScrollPane8.setViewportView(odpoved4Label1);

        jScrollPane9.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        znenieOtazkyLabel.setEditable(false);
        znenieOtazkyLabel.setColumns(20);
        znenieOtazkyLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        znenieOtazkyLabel.setLineWrap(true);
        znenieOtazkyLabel.setRows(5);
        znenieOtazkyLabel.setWrapStyleWord(true);
        znenieOtazkyLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane9.setViewportView(znenieOtazkyLabel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(odpoved4CheckBox)
                                    .addComponent(odpoved2CheckBox)
                                    .addComponent(odpoved3CheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(jScrollPane3)
                                    .addComponent(jScrollPane4)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(odpoved1CheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odpoved1CheckBox1)
                            .addComponent(odpoved3CheckBox1)
                            .addComponent(odpoved4CheckBox1)
                            .addComponent(odpoved2CheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .addComponent(jScrollPane6)
                            .addComponent(jScrollPane7)
                            .addComponent(jScrollPane8))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odpoved1CheckBox)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odpoved2CheckBox)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odpoved3CheckBox)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(odpoved4CheckBox)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(odpoved1CheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(odpoved2CheckBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(odpoved3CheckBox1))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(odpoved4CheckBox1)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dalsiaOtazkaButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        dalsiaOtazkaButton.setText(">>");
        dalsiaOtazkaButton.setEnabled(false);
        dalsiaOtazkaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dalsiaOtazkaButtonActionPerformed(evt);
            }
        });

        aktStavLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        aktStavLabel.setText("1/1500");

        grafikaLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grafikaLabelMouseClicked(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonGroup1.add(ucenieRadioButton);
        ucenieRadioButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ucenieRadioButton.setSelected(true);
        ucenieRadioButton.setText("učenie");
        ucenieRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ucenieRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(treningRadioButton);
        treningRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        treningRadioButton.setText("tréning");
        treningRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treningRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(testRadioButton);
        testRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        testRadioButton.setText("test");
        testRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRadioButtonActionPerformed(evt);
            }
        });

        rozsahLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rozsahLabel.setText("Rozsah:");

        minRozsahTextField.setText("500");
        minRozsahTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                minRozsahTextFieldFocusLost(evt);
            }
        });
        minRozsahTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minRozsahTextFieldActionPerformed(evt);
            }
        });

        maxRozsahTextField.setText("600");
        maxRozsahTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                maxRozsahTextFieldFocusLost(evt);
            }
        });
        maxRozsahTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxRozsahTextFieldActionPerformed(evt);
            }
        });

        mixCheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        mixCheckBox.setSelected(true);
        mixCheckBox.setText("pomiešať");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ucenieRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(treningRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(testRadioButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mixCheckBox)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(minRozsahTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(maxRozsahTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rozsahLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rozsahLabel)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxRozsahTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minRozsahTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mixCheckBox))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ucenieRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(treningRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testRadioButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setBackground(new java.awt.Color(0, 255, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("3");
        jLabel5.setOpaque(true);

        jLabel10.setBackground(new java.awt.Color(255, 153, 0));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("2");
        jLabel10.setOpaque(true);

        jLabel7.setBackground(new java.awt.Color(255, 255, 0));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("1");
        jLabel7.setOpaque(true);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("0");
        jLabel8.setOpaque(true);

        jLabel9.setBackground(new java.awt.Color(255, 0, 0));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("<0");
        jLabel9.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9))
        );

        jLabel1.setText("uplynulo:");

        jLabel2.setText("zostáva:");

        uplynuloLabel.setText("00:00:00");

        zostavaLabel.setText("00:00:00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(uplynuloLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zostavaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(uplynuloLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(zostavaLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        predchadzajuciButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        predchadzajuciButton.setText("<<");
        predchadzajuciButton.setEnabled(false);
        predchadzajuciButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predchadzajuciButtonActionPerformed(evt);
            }
        });

        zacatTreningButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        zacatTreningButton.setText("Začať");
        zacatTreningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zacatTreningButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Správnych:");

        cervenyCheckBox.setBackground(new java.awt.Color(255, 0, 0));
        cervenyCheckBox.setSelected(true);

        bielyCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        bielyCheckBox.setSelected(true);

        zltyCheckBox.setBackground(new java.awt.Color(255, 255, 0));
        zltyCheckBox.setSelected(true);

        oranzovyCheckBox.setBackground(new java.awt.Color(255, 153, 0));
        oranzovyCheckBox.setSelected(true);

        zelenyCheckBox.setBackground(new java.awt.Color(0, 255, 51));

        opravitChybuButton.setText("Opraviť chybu");
        opravitChybuButton.setEnabled(false);
        opravitChybuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opravitChybuButtonActionPerformed(evt);
            }
        });

        nacitajProfilButton.setText("Načítaj profil");
        nacitajProfilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nacitajProfilButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(grafikaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(predchadzajuciButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dalsiaOtazkaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(aktStavLabel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(zacatTreningButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(zltyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(oranzovyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cervenyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(5, 5, 5)
                                            .addComponent(bielyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(zelenyCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(nacitajProfilButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(opravitChybuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cervenyCheckBox)
                            .addComponent(bielyCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zltyCheckBox)
                            .addComponent(oranzovyCheckBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zelenyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zacatTreningButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dalsiaOtazkaButton)
                    .addComponent(aktStavLabel)
                    .addComponent(predchadzajuciButton)
                    .addComponent(opravitChybuButton)
                    .addComponent(nacitajProfilButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(grafikaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pridatPouzivatelaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pridatPouzivatelaButtonActionPerformed
        if (novyPouzivatelTextField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nie je uvedené meno nového používateľa!");
            return;
        }
        try {
            database.inzertUser(novyPouzivatelTextField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "nastala chyba s databazou (inzertUser): " + e);
        }
    }//GEN-LAST:event_pridatPouzivatelaButtonActionPerformed

    private void zacatTreningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zacatTreningButtonActionPerformed
        if (!beziTrening) {
            // trening nebezal,zaciname trening
            startTime = System.currentTimeMillis();
            beziTrening = true;
            zacatTreningButton.setText("Ukončiť");
            nastavButtonyZacatie();
            povodnaStatistika = vybranyUser.statistika.clone();
            //resetCheckboxyLabelyBG();
            int min = 1;
            try {
                min = Integer.parseInt(minRozsahTextField.getText());
            } catch (NumberFormatException numberFormatException) {
            }
            int max = otazky.size() - 1;
            try {
                max = Integer.parseInt(maxRozsahTextField.getText());
            } catch (NumberFormatException numberFormatException) {
            }
            // check rozsah
            if (min >= otazky.size() || min <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Minimalny rozsah je zle nastaveny. Nastavujem na 1.");
                minRozsahTextField.setText("1");
                min = 1;
            }
            if (max >= otazky.size() || max <= 0) {
                max = otazky.size() - 1;
                JOptionPane.showMessageDialog(rootPane, "Maximalny rozsah je zle nastaveny. Nastavujem na " + max + ".");
                maxRozsahTextField.setText(max + "");
            }
            if (min > max) {
                int pom = min;
                min = max;
                max = pom;
                minRozsahTextField.setText(min+"");
                maxRozsahTextField.setText(max + "");
            }
            // vygenerujeme postupnost cisiel otazok z nasho rozsahu
            List<Integer> vygenerovaneUlohy = new ArrayList<>();
            for (int i = min; i <= max; i++) {
                // vyberieme na ucenie a trening iba tie otazky ktorych farbu sme oznacili v checkboxoch
                if (treningRadioButton.isSelected() || ucenieRadioButton.isSelected()) {
                    if (vyhovujeCheckboxomUloha(i)) {
                        vygenerovaneUlohy.add(i);
                    }
                } else // piseme test
                {
                    if (vybranyUser.statistika[i] > 2) {
                        // otazka je zelena, mozeme ju pridat
                        vygenerovaneUlohy.add(i);
                    }
                }
            }
            if (testRadioButton.isSelected() && vygenerovaneUlohy.size() != max - min + 1) {
                int pocet = (max - min + 1) - vygenerovaneUlohy.size();
                JOptionPane.showMessageDialog(rootPane, pocet + " otázok nebolo vybraných do testu, pretože ešte nie sú zelené.");
            }
            if (mixCheckBox.isSelected()) {
                Collections.shuffle(vygenerovaneUlohy);
            }
            List<Integer> pom = new ArrayList<>();
            pom.add(0);
            pom.addAll(vygenerovaneUlohy);
            vygenerovaneUlohy = pom;
            System.out.println("vygenerovane ulohy:\n" + vygenerovaneUlohy);
            aktualneUlohy = vygenerovaneUlohy;
            aktualnaUloha = 1;
            if (vygenerovaneUlohy.size() == 1) {
                JOptionPane.showMessageDialog(rootPane, "Podľa zadaných kritérií sa nepodarilo vyselektovať žiadne otázky.");
                beziTrening = false;
                zacatTreningButton.setText("Začať");
                ukoncitTrening();
                return;
            }
            // refreshni otazku a odpovede
            refreshOtazkaOdpovede();
            aktStavLabel.setText("1/" + (aktualneUlohy.size() - 1));
            uspesnych = 0;
            minusBodov = 0;
            // ak sa ucime tak hned aj prvu ulohu vyhodnotime
            if (ucenieRadioButton.isSelected()) {
                skontrolujOdpovede(true);
            }
            odpoved1Label.requestFocus();
            timer = new Timer(startTime);
            timer.addPropertyChangeListener(this);
            es.execute(timer);
        } else {
            // bezal trening, ukoncime ho
            beziTrening = false;
            zacatTreningButton.setText("Začať");
            int akt = aktualnaUloha;
            if (!ohodnotene) {
                akt--;
            }
            ohodnotene = false;
            ukoncitTrening();
            if (!ucenieRadioButton.isSelected()) {
                zobrazStatistiku(akt);
            }
        }
    }//GEN-LAST:event_zacatTreningButtonActionPerformed

    private void zobrazStatistiku(int akt) {
        sf = new StatistikaDialogForm(povodnaStatistika, vybranyUser.statistika, aktualneUlohy, akt, this, minusBodov, es, autentifikator);
        sf.addPropertyChangeListener(this);
        sf.setVisible(true);
    }

    private void nastavButtonyZacatie() {
        znenieOtazkyLabel.setBackground(Color.white);
        rozsahLabel.setEnabled(false);
        minRozsahTextField.setEnabled(false);
        maxRozsahTextField.setEnabled(false);
        if (treningRadioButton.isSelected()) {
            odpoved1CheckBox.setEnabled(true);
            odpoved2CheckBox.setEnabled(true);
            odpoved3CheckBox.setEnabled(true);
            odpoved4CheckBox.setEnabled(true);
            odpoved1CheckBox1.setEnabled(true);
            odpoved2CheckBox1.setEnabled(true);
            odpoved3CheckBox1.setEnabled(true);
            odpoved4CheckBox1.setEnabled(true);
        }
        if (testRadioButton.isSelected()) {
            odpoved1CheckBox.setEnabled(true);
            odpoved2CheckBox.setEnabled(true);
            odpoved3CheckBox.setEnabled(true);
            odpoved4CheckBox.setEnabled(true);
        }
        dalsiaOtazkaButton.setEnabled(true);
        ucenieRadioButton.setEnabled(false);
        treningRadioButton.setEnabled(false);
        testRadioButton.setEnabled(false);
        mixCheckBox.setEnabled(false);
        int min = Integer.parseInt(minRozsahTextField.getText());
        if (aktualnaUloha > 1) {
            predchadzajuciButton.setEnabled(true);
        }
    }

    private void ukoncitTrening() {
        if (timer != null) {
            timer.setStop(true);
        }
        minRozsahTextField.setEnabled(true);
        rozsahLabel.setEnabled(true);
        maxRozsahTextField.setEnabled(true);
        if (treningRadioButton.isSelected()) {
            odpoved1CheckBox.setEnabled(false);
            odpoved2CheckBox.setEnabled(false);
            odpoved3CheckBox.setEnabled(false);
            odpoved4CheckBox.setEnabled(false);
            odpoved1CheckBox1.setEnabled(false);
            odpoved2CheckBox1.setEnabled(false);
            odpoved3CheckBox1.setEnabled(false);
            odpoved4CheckBox1.setEnabled(false);
        }
        if (testRadioButton.isSelected()) {
            odpoved1CheckBox.setEnabled(false);
            odpoved2CheckBox.setEnabled(false);
            odpoved3CheckBox.setEnabled(false);
            odpoved4CheckBox.setEnabled(false);
        }
        dalsiaOtazkaButton.setEnabled(false);
        ucenieRadioButton.setEnabled(true);
        treningRadioButton.setEnabled(true);
        testRadioButton.setEnabled(true);
        mixCheckBox.setEnabled(true);
        predchadzajuciButton.setEnabled(false);
        resetCheckboxyLabelyBG();
        aktualnaUloha = 1;
        znenieOtazkyLabel.setText("Kliknutím na štvorček v obrázku zobrazíte otázku.");
        znenieOtazkyLabel.setBackground(Color.MAGENTA);
        opravitChybuButton.setEnabled(false);
    }

    private void dalsiaOtazkaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dalsiaOtazkaButtonActionPerformed
        if (ucenieRadioButton.isSelected()) {
            // zobrazime otazku a vyznacime spravne odpovede
            aktualnaUloha++;
            if (!predchadzajuciButton.isEnabled()) {
                predchadzajuciButton.setEnabled(true);
            }
            if (aktualnaUloha == aktualneUlohy.size() - 1) {
                dalsiaOtazkaButton.setEnabled(false);
            }
            aktStavLabel.setText(aktualnaUloha + "/" + (aktualneUlohy.size() - 1));
            refreshOtazkaOdpovede();
            skontrolujOdpovede(true); // nepotrebujeme vyhodnocovat uspesnost lebo sa ucime
        } else // mame trening alebo test
        {
            if (ohodnotene) {
                ohodnotene = false;
                aktualnaUloha++;
                if (aktualnaUloha == aktualneUlohy.size()) {
                    aktualnaUloha--;
                    beziTrening = false;
                    zacatTreningButton.setText("Začať");
                    dalsiaOtazkaButton.setEnabled(false);
                    int akt = aktualnaUloha;
                    ukoncitTrening();
                    if (!ucenieRadioButton.isSelected()) {
                        zobrazStatistiku(akt);
                    }
                    return;
                }
                aktStavLabel.setText(aktualnaUloha + "/" + (aktualneUlohy.size() - 1));
                refreshOtazkaOdpovede();
                zapniCheckboxy();
            } else {
                // odpovede este neboli ohodnotene
                ohodnotene = true;
                boolean uspesne = true;
                uspesne = skontrolujOdpovede(uspesne);
                if (uspesne) {
                    uspesnych++;
                }
                // vypneme checkboxy
                vypniCheckboxy();
                // updatneme v DB aj v pameti statistiku
                try {
                    database.updateUspesne(aktUser, aktualnaOtazka.id, uspesne, vybranyUser.statistika[(int) aktualnaOtazka.id]);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "nastala chyba s databazou(update uspesne): " + e);
                }
                // ak je pocet spravnych menej ako nula tak pri spravnom to dame hned na 1
                if (vybranyUser.statistika[(int) aktualnaOtazka.id] >= 0) {
                    if (uspesne) {
                        if (vybranyUser.statistika[(int) aktualnaOtazka.id] < 3) {
                            // sme uspesni a boli sme oranzovi, tak zmenime na zelenu
                            vybranyUser.statistika[(int) aktualnaOtazka.id]++;
                        } else {
                            // sme uspesni a boli sme zeleny tak ostaneme zeleny s 3kou
                        }
                    } else {
                        vybranyUser.statistika[(int) aktualnaOtazka.id]--;
                    }
                } else if (uspesne) {
                    // bolo -1 a uhadli sme, tak davame hned na 1
                    vybranyUser.statistika[(int) aktualnaOtazka.id] = 1;
                }
                refreshObrazok();
            }
        }
    }//GEN-LAST:event_dalsiaOtazkaButtonActionPerformed

    private void nakresliOznacenuOtazkuStvorcek() {
        // nastavime stvorcek aktualnej ulohy
        int pomm = (int) aktualnaOtazka.id;
        pomm--;
        klikX = (pomm % 98) * 8 + 1;
        klikY = (pomm / 98) * 8 + 1;
        refreshObrazok();
    }

    private void resetCheckboxyLabelyBG() {
        odpoved1Label.setBackground(Color.white);
        odpoved2Label.setBackground(Color.white);
        odpoved3Label.setBackground(Color.white);
        odpoved4Label.setBackground(Color.white);
        odpoved1CheckBox.setSelected(false);
        odpoved2CheckBox.setSelected(false);
        odpoved3CheckBox.setSelected(false);
        odpoved4CheckBox.setSelected(false);
        odpoved1Label1.setBackground(Color.white);
        odpoved2Label1.setBackground(Color.white);
        odpoved3Label1.setBackground(Color.white);
        odpoved4Label1.setBackground(Color.white);
        odpoved1CheckBox1.setSelected(false);
        odpoved2CheckBox1.setSelected(false);
        odpoved3CheckBox1.setSelected(false);
        odpoved4CheckBox1.setSelected(false);
        // vynulovat texty
        odpoved1Label.setText("");
        odpoved2Label.setText("");
        odpoved3Label.setText("");
        odpoved4Label.setText("");
        odpoved1Label1.setText("");
        odpoved2Label1.setText("");
        odpoved3Label1.setText("");
        odpoved4Label1.setText("");
    }

    private void pouzivatelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pouzivatelComboBoxActionPerformed
        aktUser = (String) pouzivatelComboBox.getSelectedItem();
        vybranyUser = users.get(pouzivatelComboBox.getSelectedIndex());
        System.out.println("vybrany user: " + vybranyUser.username);
        System.out.println("akt user: " + aktUser);
        String skuska = Arrays.toString(vybranyUser.statistika);
        System.out.println("dlzka statistiky: " + skuska.length());
        refreshObrazok();
    }//GEN-LAST:event_pouzivatelComboBoxActionPerformed

    private void predchadzajuciButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predchadzajuciButtonActionPerformed
        if (predchadzajuciButton.isEnabled()) {
            if (ucenieRadioButton.isSelected()) {
                // zobrazime otazku a vyznacime spravne odpovede
                aktualnaUloha--;
                if (!dalsiaOtazkaButton.isEnabled()) {
                    dalsiaOtazkaButton.setEnabled(true);
                }
                if (aktualnaUloha == 1) {
                    predchadzajuciButton.setEnabled(false);
                }
                aktStavLabel.setText(aktualnaUloha + "/" + (aktualneUlohy.size() - 1));
                refreshOtazkaOdpovede();
                skontrolujOdpovede(true);
            }
        }
    }//GEN-LAST:event_predchadzajuciButtonActionPerformed

    private void odpoved1LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved1LabelMouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved1CheckBox.isEnabled()) {
                if (odpoved1CheckBox.isSelected()) {
                    odpoved1Label.setBackground(Color.white);
                    odpoved1CheckBox.setSelected(false);
                } else {
                    odpoved1Label.setBackground(farbaOznacenia);
                    odpoved1CheckBox.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved1LabelMouseClicked

    private void odpoved2LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved2LabelMouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved2CheckBox.isEnabled()) {
                if (odpoved2CheckBox.isSelected()) {
                    odpoved2Label.setBackground(Color.white);
                    odpoved2CheckBox.setSelected(false);
                } else {
                    odpoved2Label.setBackground(farbaOznacenia);
                    odpoved2CheckBox.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved2LabelMouseClicked

    private void odpoved3LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved3LabelMouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved3CheckBox.isEnabled()) {
                if (odpoved3CheckBox.isSelected()) {
                    odpoved3Label.setBackground(Color.white);
                    odpoved3CheckBox.setSelected(false);
                } else {
                    odpoved3Label.setBackground(farbaOznacenia);
                    odpoved3CheckBox.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved3LabelMouseClicked

    private void odpoved4LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved4LabelMouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved4CheckBox.isEnabled()) {
                if (odpoved4CheckBox.isSelected()) {
                    odpoved4Label.setBackground(Color.white);
                    odpoved4CheckBox.setSelected(false);
                } else {
                    odpoved4Label.setBackground(farbaOznacenia);
                    odpoved4CheckBox.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved4LabelMouseClicked

    private void odpoved1Label1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved1Label1MouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved1CheckBox1.isEnabled()) {
                if (odpoved1CheckBox1.isSelected()) {
                    odpoved1Label1.setBackground(Color.white);
                    odpoved1CheckBox1.setSelected(false);
                } else {
                    odpoved1Label1.setBackground(farbaOznacenia);
                    odpoved1CheckBox1.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved1Label1MouseClicked

    private void odpoved2Label1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved2Label1MouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved2CheckBox1.isEnabled()) {
                if (odpoved2CheckBox1.isSelected()) {
                    odpoved2Label1.setBackground(Color.white);
                    odpoved2CheckBox1.setSelected(false);
                } else {
                    odpoved2Label1.setBackground(farbaOznacenia);
                    odpoved2CheckBox1.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved2Label1MouseClicked

    private void odpoved3Label1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved3Label1MouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved3CheckBox1.isEnabled()) {
                if (odpoved3CheckBox1.isSelected()) {
                    odpoved3Label1.setBackground(Color.white);
                    odpoved3CheckBox1.setSelected(false);
                } else {
                    odpoved3Label1.setBackground(farbaOznacenia);
                    odpoved3CheckBox1.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved3Label1MouseClicked

    private void odpoved4Label1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odpoved4Label1MouseClicked
        if (treningRadioButton.isSelected() || testRadioButton.isSelected()) {
            if (odpoved4CheckBox1.isEnabled()) {
                if (odpoved4CheckBox1.isSelected()) {
                    odpoved4Label1.setBackground(Color.white);
                    odpoved4CheckBox1.setSelected(false);
                } else {
                    odpoved4Label1.setBackground(farbaOznacenia);
                    odpoved4CheckBox1.setSelected(true);
                }
            }
        }
    }//GEN-LAST:event_odpoved4Label1MouseClicked

    private void odpoved1LabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved1LabelKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                odpoved4Label1.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved2Label.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                // nic lebo sme na lavej strane
                break;
            case KeyEvent.VK_RIGHT:
                odpoved1Label1.requestFocus();
                break;
            case KeyEvent.VK_SPACE:
                odpoved1LabelMouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_T:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved1LabelKeyPressed

    private void odpoved1Label1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved1Label1KeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                odpoved4Label.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved2Label1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                odpoved1Label.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                // nic lebo sme na pravej strane
                break;
            case KeyEvent.VK_SPACE:
                odpoved1Label1MouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved1Label1KeyPressed

    private void odpoved2LabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved2LabelKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                // nemozeme ist vyssie
                odpoved1Label.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved3Label.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                // nic lebo sme na lavej strane
                break;
            case KeyEvent.VK_RIGHT:
                odpoved2Label1.requestFocus();
                break;
            case KeyEvent.VK_SPACE:
                odpoved2LabelMouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved2LabelKeyPressed

    private void odpoved3LabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved3LabelKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                // nemozeme ist vyssie
                odpoved2Label.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved4Label.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                // nic lebo sme na lavej strane
                break;
            case KeyEvent.VK_RIGHT:
                odpoved3Label1.requestFocus();
                break;
            case KeyEvent.VK_SPACE:
                odpoved3LabelMouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved3LabelKeyPressed

    private void odpoved4LabelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved4LabelKeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                // nemozeme ist vyssie
                odpoved3Label.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved1Label1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                // nic lebo sme na lavej strane
                break;
            case KeyEvent.VK_RIGHT:
                odpoved4Label1.requestFocus();
                break;
            case KeyEvent.VK_SPACE:
                odpoved4LabelMouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved4LabelKeyPressed

    private void odpoved2Label1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved2Label1KeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                odpoved1Label1.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved3Label1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                odpoved2Label.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                // nic lebo sme na pravej strane
                break;
            case KeyEvent.VK_SPACE:
                odpoved2Label1MouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved2Label1KeyPressed

    private void odpoved3Label1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved3Label1KeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                odpoved2Label1.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved4Label1.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                odpoved3Label.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                // nic lebo sme na pravej strane
                break;
            case KeyEvent.VK_SPACE:
                odpoved3Label1MouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved3Label1KeyPressed

    private void odpoved4Label1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_odpoved4Label1KeyPressed
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_UP:
                odpoved3Label1.requestFocus();
                break;
            case KeyEvent.VK_DOWN:
                odpoved1Label.requestFocus();
                break;
            case KeyEvent.VK_LEFT:
                odpoved4Label.requestFocus();
                break;
            case KeyEvent.VK_RIGHT:
                // nic lebo sme na pravej strane
                break;
            case KeyEvent.VK_SPACE:
                odpoved4Label1MouseClicked(null);
                break;
            case KeyEvent.VK_ENTER:
                dalsiaOtazkaButtonActionPerformed(null);
                break;
            case KeyEvent.VK_BACK_SPACE:
                predchadzajuciButtonActionPerformed(null);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_odpoved4Label1KeyPressed

    private void ucenieRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ucenieRadioButtonActionPerformed
        ucenieRadioButton.setFont(new Font("Tahoma", Font.BOLD, 18));
        treningRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        testRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        cervenyCheckBox.setEnabled(true);
        bielyCheckBox.setEnabled(true);
        zltyCheckBox.setEnabled(true);
        oranzovyCheckBox.setEnabled(true);
        zelenyCheckBox.setEnabled(true);
    }//GEN-LAST:event_ucenieRadioButtonActionPerformed

    private void treningRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treningRadioButtonActionPerformed
        ucenieRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        treningRadioButton.setFont(new Font("Tahoma", Font.BOLD, 18));
        testRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        cervenyCheckBox.setEnabled(true);
        bielyCheckBox.setEnabled(true);
        zltyCheckBox.setEnabled(true);
        oranzovyCheckBox.setEnabled(true);
        zelenyCheckBox.setEnabled(true);
    }//GEN-LAST:event_treningRadioButtonActionPerformed

    private void testRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRadioButtonActionPerformed
        ucenieRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        treningRadioButton.setFont(new Font("Tahoma", Font.PLAIN, 18));
        testRadioButton.setFont(new Font("Tahoma", Font.BOLD, 18));
        cervenyCheckBox.setEnabled(false);
        bielyCheckBox.setEnabled(false);
        zltyCheckBox.setEnabled(false);
        oranzovyCheckBox.setEnabled(false);
        zelenyCheckBox.setEnabled(false);
    }//GEN-LAST:event_testRadioButtonActionPerformed

    private void maxRozsahTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxRozsahTextFieldActionPerformed
        System.out.println("maxRozsahTextFieldActionPerformed");
    }//GEN-LAST:event_maxRozsahTextFieldActionPerformed

    private void odpoved1CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved1CheckBoxActionPerformed
        if (!odpoved1CheckBox.isSelected()) {
            odpoved1Label.setBackground(Color.white);
        } else {
            odpoved1Label.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved1CheckBoxActionPerformed

    private void odpoved2CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved2CheckBoxActionPerformed
        if (!odpoved2CheckBox.isSelected()) {
            odpoved2Label.setBackground(Color.white);
        } else {
            odpoved2Label.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved2CheckBoxActionPerformed

    private void odpoved3CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved3CheckBoxActionPerformed
        if (!odpoved3CheckBox.isSelected()) {
            odpoved3Label.setBackground(Color.white);
        } else {
            odpoved3Label.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved3CheckBoxActionPerformed

    private void odpoved4CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved4CheckBoxActionPerformed
        if (!odpoved4CheckBox.isSelected()) {
            odpoved4Label.setBackground(Color.white);
        } else {
            odpoved4Label.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved4CheckBoxActionPerformed

    private void odpoved1CheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved1CheckBox1ActionPerformed
        if (!odpoved1CheckBox1.isSelected()) {
            odpoved1Label1.setBackground(Color.white);
        } else {
            odpoved1Label1.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved1CheckBox1ActionPerformed

    private void odpoved2CheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved2CheckBox1ActionPerformed
        if (!odpoved2CheckBox1.isSelected()) {
            odpoved2Label1.setBackground(Color.white);
        } else {
            odpoved2Label1.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved2CheckBox1ActionPerformed

    private void odpoved3CheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved3CheckBox1ActionPerformed
        if (!odpoved3CheckBox1.isSelected()) {
            odpoved3Label1.setBackground(Color.white);
        } else {
            odpoved3Label1.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved3CheckBox1ActionPerformed

    private void odpoved4CheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_odpoved4CheckBox1ActionPerformed
        if (!odpoved4CheckBox1.isSelected()) {
            odpoved4Label1.setBackground(Color.white);
        } else {
            odpoved4Label1.setBackground(farbaOznacenia);
        }
    }//GEN-LAST:event_odpoved4CheckBox1ActionPerformed

    private void grafikaLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grafikaLabelMouseClicked
        //System.out.println("grafikaLabelMouseClicked: " + evt.getY() + ":" + evt.getX());
        if (!beziTrening) {
            klikY = evt.getY();
            klikX = evt.getX();
            refreshObrazok();
            try {
                Otazka nakliknuta = otazky.get((klikY / 8) * 98 + (klikX / 8) % 98 + 1);
                refreshOtazkaOdpovedeNakliknuta(nakliknuta);
            } catch (Exception e) {
                System.out.println("kliknute na ciernu plochu kde nie su otazky");
            }
        } else {
            System.out.println("Nakliknutu otazku mozete zobrazit az po skonceni ucenia/treningu/testu");
        }

    }//GEN-LAST:event_grafikaLabelMouseClicked

    private void maxRozsahTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxRozsahTextFieldFocusLost
        System.out.println("maxRozsahTextFieldFocusLost");
        refreshObrazok();
    }//GEN-LAST:event_maxRozsahTextFieldFocusLost

    private void minRozsahTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minRozsahTextFieldFocusLost
        System.out.println("minRozsahTextFieldFocusLost");
        refreshObrazok();
    }//GEN-LAST:event_minRozsahTextFieldFocusLost

    private void minRozsahTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minRozsahTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minRozsahTextFieldActionPerformed

    private void opravitChybuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opravitChybuButtonActionPerformed
        if (!editujeme) {
            editujeme = true;
            opravitChybuButton.setText("Uložiť zmeny");
            odpoved1Label.setEditable(true);
            odpoved2Label.setEditable(true);
            odpoved3Label.setEditable(true);
            odpoved4Label.setEditable(true);
            odpoved1Label1.setEditable(true);
            odpoved2Label1.setEditable(true);
            odpoved3Label1.setEditable(true);
            odpoved4Label1.setEditable(true);
            znenieOtazkyLabel.setEditable(true);
            JOptionPane.showMessageDialog(rootPane, "Teraz môžete editovať odpovede alebo otázku.");
        } else {
            editujeme = false;
            opravitChybuButton.setText("Opraviť chybu");
            odpoved1Label.setEditable(false);
            odpoved2Label.setEditable(false);
            odpoved3Label.setEditable(false);
            odpoved4Label.setEditable(false);
            odpoved1Label1.setEditable(false);
            odpoved2Label1.setEditable(false);
            odpoved3Label1.setEditable(false);
            odpoved4Label1.setEditable(false);
            znenieOtazkyLabel.setEditable(false);
            Otazka aktualna = new Otazka();
            aktualna.id = aktualnaOtazka.id;
            aktualna.jeSpravne = aktualnaOtazka.jeSpravne;
            aktualna.otazka = znenieOtazkyLabel.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(0)] = odpoved1Label.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(1)] = odpoved2Label.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(2)] = odpoved3Label.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(3)] = odpoved4Label.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(4)] = odpoved1Label1.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(5)] = odpoved2Label1.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(6)] = odpoved3Label1.getText();
            aktualna.odpovede[aktualneOdpovedeMix.get(7)] = odpoved4Label1.getText();

            aktualnaOtazka.otazka = znenieOtazkyLabel.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(0)] = odpoved1Label.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(1)] = odpoved2Label.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(2)] = odpoved3Label.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(3)] = odpoved4Label.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(4)] = odpoved1Label1.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(5)] = odpoved2Label1.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(6)] = odpoved3Label1.getText();
            aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(7)] = odpoved4Label1.getText();
            try {
                database.updateOtazka(aktualna);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "nastala chyba s databazou(update otazka): " + e);
            }
        }
    }//GEN-LAST:event_opravitChybuButtonActionPerformed

    private void nacitajProfilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nacitajProfilButtonActionPerformed
        NacitajProfilDialogForm npdf = new NacitajProfilDialogForm(this, true);
        npdf.addPropertyChangeListener(this);
        npdf.setVisible(true);

    }//GEN-LAST:event_nacitajProfilButtonActionPerformed

    private boolean skontrolujOdpovede(boolean uspesne) {
        //System.out.println("vyhodnocujem ulohu: " + aktualnaOtazka.otazka);
        //System.out.println("odpovede: " + Arrays.toString(aktualnaOtazka.jeSpravne));
        Color nespravnaOdpovedFarba = Color.red;
        Color spravnaOdpovedFarba = Color.green;
        Color spravnaNeoznacenaFarba = Color.PINK;
        if (ucenieRadioButton.isSelected()) {
            nespravnaOdpovedFarba = spravnaOdpovedFarba;
            spravnaNeoznacenaFarba = spravnaOdpovedFarba;
        }

        if (odpoved1CheckBox.isSelected()) {
            if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(0)]) {
                // je oznacena spravna odpoved
                odpoved1Label.setBackground(spravnaOdpovedFarba);
            } else {
                // je oznacena nespravna odpoved
                minusBodov--;
                odpoved1Label.setBackground(nespravnaOdpovedFarba);
                uspesne = false;
            }
        } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(0)]) {
            // nie je oznacena spravna odpoved
            minusBodov--;
            odpoved1Label.setBackground(spravnaNeoznacenaFarba);
            uspesne = false;
        }
        if (odpoved2CheckBox.isSelected()) {
            if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(1)]) {
                // je oznacena spravna odpoved
                odpoved2Label.setBackground(spravnaOdpovedFarba);
            } else {
                // je oznacena nespravna odpoved
                minusBodov--;
                odpoved2Label.setBackground(nespravnaOdpovedFarba);
                uspesne = false;
            }
        } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(1)]) {
            // nie je oznacena spravna odpoved
            minusBodov--;
            odpoved2Label.setBackground(spravnaNeoznacenaFarba);
            uspesne = false;
        }
        if (odpoved3CheckBox.isSelected()) {
            if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(2)]) {
                // je oznacena spravna odpoved
                odpoved3Label.setBackground(spravnaOdpovedFarba);
            } else {
                // je oznacena nespravna odpoved
                minusBodov--;
                odpoved3Label.setBackground(nespravnaOdpovedFarba);
                uspesne = false;
            }
        } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(2)]) {
            // nie je oznacena spravna odpoved
            minusBodov--;
            odpoved3Label.setBackground(spravnaNeoznacenaFarba);
            uspesne = false;
        }
        if (odpoved4CheckBox.isSelected()) {
            if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(3)]) {
                // je oznacena spravna odpoved
                odpoved4Label.setBackground(spravnaOdpovedFarba);
            } else {
                // je oznacena nespravna odpoved
                minusBodov--;
                odpoved4Label.setBackground(nespravnaOdpovedFarba);
                uspesne = false;
            }
        } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(3)]) {
            // nie je oznacena spravna odpoved
            minusBodov--;
            odpoved4Label.setBackground(spravnaNeoznacenaFarba);
            uspesne = false;
        }
//==================================================prava strana================== 
        if (treningRadioButton.isSelected() || ucenieRadioButton.isSelected()) {
            // vyhodnotime pravu stranu iba ked mame trening
            if (odpoved1CheckBox1.isSelected()) {
                if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(4)]) {
                    // je oznacena spravna odpoved
                    odpoved1Label1.setBackground(spravnaOdpovedFarba);
                } else {
                    // je oznacena nespravna odpoved
                    minusBodov--;
                    odpoved1Label1.setBackground(nespravnaOdpovedFarba);
                    uspesne = false;
                }
            } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(4)]) {
                // nie je oznacena spravna odpoved
                minusBodov--;
                odpoved1Label1.setBackground(spravnaNeoznacenaFarba);
                uspesne = false;
            }
            if (odpoved2CheckBox1.isSelected()) {
                if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(5)]) {
                    // je oznacena spravna odpoved
                    odpoved2Label1.setBackground(spravnaOdpovedFarba);
                } else {
                    // je oznacena nespravna odpoved
                    minusBodov--;
                    odpoved2Label1.setBackground(nespravnaOdpovedFarba);
                    uspesne = false;
                }
            } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(5)]) {
                // nie je oznacena spravna odpoved
                minusBodov--;
                odpoved2Label1.setBackground(spravnaNeoznacenaFarba);
                uspesne = false;
            }
            if (odpoved3CheckBox1.isSelected()) {
                if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(6)]) {
                    // je oznacena spravna odpoved
                    odpoved3Label1.setBackground(spravnaOdpovedFarba);
                } else {
                    // je oznacena nespravna odpoved
                    minusBodov--;
                    odpoved3Label1.setBackground(nespravnaOdpovedFarba);
                    uspesne = false;
                }
            } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(6)]) {
                // nie je oznacena spravna odpoved
                minusBodov--;
                odpoved3Label1.setBackground(spravnaNeoznacenaFarba);
                uspesne = false;
            }
            if (odpoved4CheckBox1.isSelected()) {
                if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(7)]) {
                    // je oznacena spravna odpoved
                    odpoved4Label1.setBackground(spravnaOdpovedFarba);
                } else {
                    // je oznacena nespravna odpoved
                    minusBodov--;
                    odpoved4Label1.setBackground(nespravnaOdpovedFarba);
                    uspesne = false;
                }
            } else if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(7)]) {
                // nie je oznacena spravna odpoved
                minusBodov--;
                odpoved4Label1.setBackground(spravnaNeoznacenaFarba);
                uspesne = false;
            }
        }
        return uspesne;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aktStavLabel;
    private javax.swing.JCheckBox bielyCheckBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cervenyCheckBox;
    private javax.swing.JButton dalsiaOtazkaButton;
    private javax.swing.JLabel grafikaLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField maxRozsahTextField;
    private javax.swing.JTextField minRozsahTextField;
    private javax.swing.JCheckBox mixCheckBox;
    private javax.swing.JButton nacitajProfilButton;
    private javax.swing.JTextField novyPouzivatelTextField;
    private javax.swing.JCheckBox odpoved1CheckBox;
    private javax.swing.JCheckBox odpoved1CheckBox1;
    private javax.swing.JTextArea odpoved1Label;
    private javax.swing.JTextArea odpoved1Label1;
    private javax.swing.JCheckBox odpoved2CheckBox;
    private javax.swing.JCheckBox odpoved2CheckBox1;
    private javax.swing.JTextArea odpoved2Label;
    private javax.swing.JTextArea odpoved2Label1;
    private javax.swing.JCheckBox odpoved3CheckBox;
    private javax.swing.JCheckBox odpoved3CheckBox1;
    private javax.swing.JTextArea odpoved3Label;
    private javax.swing.JTextArea odpoved3Label1;
    private javax.swing.JCheckBox odpoved4CheckBox;
    private javax.swing.JCheckBox odpoved4CheckBox1;
    private javax.swing.JTextArea odpoved4Label;
    private javax.swing.JTextArea odpoved4Label1;
    private javax.swing.JButton opravitChybuButton;
    private javax.swing.JCheckBox oranzovyCheckBox;
    private javax.swing.JComboBox pouzivatelComboBox;
    private javax.swing.JButton predchadzajuciButton;
    private javax.swing.JButton pridatPouzivatelaButton;
    private javax.swing.JLabel rozsahLabel;
    private javax.swing.JRadioButton testRadioButton;
    private javax.swing.JRadioButton treningRadioButton;
    private javax.swing.JRadioButton ucenieRadioButton;
    private javax.swing.JLabel uplynuloLabel;
    private javax.swing.JButton zacatTreningButton;
    private javax.swing.JCheckBox zelenyCheckBox;
    private javax.swing.JCheckBox zltyCheckBox;
    private javax.swing.JTextArea znenieOtazkyLabel;
    private javax.swing.JLabel zostavaLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("userAdded".equals(evt.getPropertyName())) {
            // refresh combobox
            try {
                users = database.getUsers();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "nastala chyba s databazou(get users): " + e);
            }
            refreshUserCombobox();
        }
        if ("secondAdded".equals(evt.getPropertyName())) {
            //System.out.println("second added");
            uplynuloLabel.setText(getElapsedTime(startTime));
            zostavaLabel.setText(getETATime(startTime, aktualnaUloha, aktualneUlohy.size()));
        }
        if ("nacitanyProfil".equals(evt.getPropertyName())) {
            System.out.println("nacitanyProfil");
            users = database.getUsers();
            refreshUserCombobox();
            refreshObrazok();
        }
        if ("znovaPrejst".equals(evt.getPropertyName())) {
            System.out.println("znova prejdeme tieto ulohy: " + sf.neuspesneOtazky);
            beziTrening = true;
            startTime = System.currentTimeMillis();
            zacatTreningButton.setText("Ukončiť");
            nastavButtonyZacatie();
            povodnaStatistika = vybranyUser.statistika.clone();
            List<Integer> pom = new ArrayList<>();
            pom.add(0);
            pom.addAll(sf.neuspesneOtazky);
            aktualneUlohy = pom;
            aktualnaUloha = 1;
            // refreshni otazku a odpovede
            refreshOtazkaOdpovede();
            aktStavLabel.setText("1/" + (aktualneUlohy.size() - 1));
            uspesnych = 0;
            minusBodov = 0;
            // restart casovac
            odpoved1Label.requestFocus();
            timer = new Timer(startTime);
            timer.addPropertyChangeListener(this);
            es.execute(timer);
        }
    }

    private void refreshUserCombobox() {
        userComboboxModel = new DefaultComboBoxModel();
        for (User user : users) {
            userComboboxModel.addElement(user.username);
        }
        pouzivatelComboBox.setModel(userComboboxModel);
        pouzivatelComboBoxActionPerformed(null);
    }

    private void refreshOtazkaOdpovede() {
        aktualnaOtazka = otazky.get(aktualneUlohy.get(aktualnaUloha));
        opravitChybuButton.setEnabled(true);
        resetOdpovedeFonty();
        resetCheckboxyLabelyBG();
        nakresliOznacenuOtazkuStvorcek();
        // 150 ked je 12 plain
        // 236 ked je 11 plain       
        znenieOtazkyLabel.setText(aktualnaOtazka.otazka);
        Collections.shuffle(aktualneOdpovedeMix);
        if (treningRadioButton.isSelected() || ucenieRadioButton.isSelected()) {
            nastavOdpovedText(odpoved1Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(0)]);
            nastavOdpovedText(odpoved2Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(1)]);
            nastavOdpovedText(odpoved3Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(2)]);
            nastavOdpovedText(odpoved4Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(3)]);
            nastavOdpovedText(odpoved1Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(4)]);
            nastavOdpovedText(odpoved2Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(5)]);
            nastavOdpovedText(odpoved3Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(6)]);
            nastavOdpovedText(odpoved4Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(7)]);
        } else {
            // chceme test, takze budu aktivne len prve 4 odpovede
            nastavOdpovedText(odpoved1Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(0)]);
            nastavOdpovedText(odpoved2Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(1)]);
            nastavOdpovedText(odpoved3Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(2)]);
            nastavOdpovedText(odpoved4Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(3)]);
        }
    }

    private void refreshOtazkaOdpovedeNakliknuta(Otazka nakliknuta) {
        resetOdpovedeFonty();
        resetCheckboxyLabelyBG();
        aktualnaOtazka = nakliknuta;
        znenieOtazkyLabel.setText(aktualnaOtazka.otazka);
        Collections.shuffle(aktualneOdpovedeMix);
        nastavOdpovedText(odpoved1Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(0)]);
        nastavOdpovedText(odpoved2Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(1)]);
        nastavOdpovedText(odpoved3Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(2)]);
        nastavOdpovedText(odpoved4Label, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(3)]);
        nastavOdpovedText(odpoved1Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(4)]);
        nastavOdpovedText(odpoved2Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(5)]);
        nastavOdpovedText(odpoved3Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(6)]);
        nastavOdpovedText(odpoved4Label1, aktualnaOtazka.odpovede[aktualneOdpovedeMix.get(7)]);
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(0)]) {
            odpoved1Label.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(1)]) {
            odpoved2Label.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(2)]) {
            odpoved3Label.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(3)]) {
            odpoved4Label.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(4)]) {
            odpoved1Label1.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(5)]) {
            odpoved2Label1.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(6)]) {
            odpoved3Label1.setBackground(Color.green);
        }
        if (aktualnaOtazka.jeSpravne[aktualneOdpovedeMix.get(7)]) {
            odpoved4Label1.setBackground(Color.green);
        }
    }

    private void refreshObrazok() {
        BufferedImage obrazok = new BufferedImage(784, 128, BufferedImage.TYPE_INT_RGB);
        boolean[][] matica = new boolean[16][98];
        int min = Integer.parseInt(minRozsahTextField.getText());
        int max = Integer.parseInt(maxRozsahTextField.getText());

        for (int i = 1; i < otazky.size(); i++) {
            int x = (i - 1) % 98;
            int y = (i - 1) / 98;
            if (i >= min && i <= max) {
                matica[y][x] = true;
            }
            if (vybranyUser.statistika[i] > 2) {
                nakresliStvorcek(obrazok, x, y, Color.green, matica[y][x]);
            } else if (vybranyUser.statistika[i] > 1) {
                nakresliStvorcek(obrazok, x, y, Color.orange, matica[y][x]);
            } else if (vybranyUser.statistika[i] > 0) {
                nakresliStvorcek(obrazok, x, y, Color.yellow, matica[y][x]);
            } else if (vybranyUser.statistika[i] > -1) {
                nakresliStvorcek(obrazok, x, y, Color.white, matica[y][x]);
            } else {
                nakresliStvorcek(obrazok, x, y, Color.red, matica[y][x]);
            }
        }

        // nakreslime zvoleny rozsah
        for (int x = 0; x < matica[0].length; x++) {
            for (int y = 0; y < matica.length; y++) {
                if (matica[y][x]) {
                    if (niejeSused(y, x, -1, 0, matica)) {
                        nakresliCiaru(y, x, -1, 0, obrazok, Color.black, 1);
                    }
                    if (niejeSused(y, x, 1, 0, matica)) {
                        nakresliCiaru(y, x, 1, 0, obrazok, Color.black, 1);
                    }
                    if (niejeSused(y, x, 0, 1, matica)) {
                        nakresliCiaru(y, x, 0, 1, obrazok, Color.black, 1);
                    }
                    if (niejeSused(y, x, 0, -1, matica)) {
                        nakresliCiaru(y, x, 0, -1, obrazok, Color.black, 1);
                    }
                }
            }
        }
        //System.out.println("klikX: "+klikX+" klikY: "+klikY);
        if (klikX == 0 && klikY == 0) {
            // nekreslime stvorcek
        } else {
            int x = klikX / 8;
            int y = klikY / 8;
            nakresliCiaru(y, x, 0, 1, obrazok, Color.darkGray, 2);
            nakresliCiaru(y, x, 0, -1, obrazok, Color.darkGray, 2);
            nakresliCiaru(y, x, 1, 0, obrazok, Color.darkGray, 2);
            nakresliCiaru(y, x, -1, 0, obrazok, Color.darkGray, 2);
        }
        grafikaLabel.setIcon(new ImageIcon(obrazok));
    }

    private void nakresliStvorcek(BufferedImage obrazok, int x, int y, Color farba, boolean jeVRozsahu) {
        // nakreslime stvorcek
        for (int k = 0; k < 8; k++) {
            for (int l = 0; l < 8; l++) {
                obrazok.setRGB(x * 8 + k, y * 8 + l, farba.getRGB());
            }
        }
        if (jeVRozsahu) {
            int kx = klikX / 8;
            int ky = klikY / 8;
            if (ky == y && kx == x) {
                // nekreslime bodku do oznaceneho stvorceka   
            } else {
                obrazok.setRGB(x * 8 + 3, y * 8 + 3, Color.black.getRGB());
            }
        }
    }

    private void vypniCheckboxy() {
        odpoved1CheckBox.setEnabled(false);
        odpoved2CheckBox.setEnabled(false);
        odpoved3CheckBox.setEnabled(false);
        odpoved4CheckBox.setEnabled(false);
        odpoved1CheckBox1.setEnabled(false);
        odpoved2CheckBox1.setEnabled(false);
        odpoved3CheckBox1.setEnabled(false);
        odpoved4CheckBox1.setEnabled(false);
    }

    private void zapniCheckboxy() {
        if (treningRadioButton.isSelected()) {
            odpoved1CheckBox.setEnabled(true);
            odpoved2CheckBox.setEnabled(true);
            odpoved3CheckBox.setEnabled(true);
            odpoved4CheckBox.setEnabled(true);
            odpoved1CheckBox1.setEnabled(true);
            odpoved2CheckBox1.setEnabled(true);
            odpoved3CheckBox1.setEnabled(true);
            odpoved4CheckBox1.setEnabled(true);
        } else {
            // robime test
            odpoved1CheckBox.setEnabled(true);
            odpoved2CheckBox.setEnabled(true);
            odpoved3CheckBox.setEnabled(true);
            odpoved4CheckBox.setEnabled(true);
        }
    }

    private void nastavOdpovedText(JTextArea odpovedLabel, String odpoved) {
        if (odpoved.length() >= 110 && odpoved.length() < 130) {
            odpovedLabel.setFont(new Font("Tahoma", Font.BOLD, 13));
        }
        if (odpoved.length() >= 130 && odpoved.length() < 150) {
            odpovedLabel.setFont(new Font("Tahoma", Font.PLAIN, 13));
        }
        if (odpoved.length() >= 150) {
            odpovedLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
        }
        odpovedLabel.setText(odpoved);
    }

    private void resetOdpovedeFonty() {
        odpoved1Label.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved2Label.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved3Label.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved4Label.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved1Label1.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved2Label1.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved3Label1.setFont(new Font("Tahoma", Font.BOLD, 14));
        odpoved4Label1.setFont(new Font("Tahoma", Font.BOLD, 14));
    }

    public String getETATime(long startTime, int aktPocet, int vsetkych) {
        double rychlost = ((System.currentTimeMillis() - startTime) / 1000.0) / aktPocet;
        double etaTime = (vsetkych - aktPocet) * rychlost;
        int hodinE = (int) ((etaTime) / (3600));
        int minutE = (int) ((etaTime) / (60));
        int sekundE = (int) ((etaTime));
        sekundE %= 60;
        minutE %= 60;
        String hodinStringE = "" + hodinE;
        if (hodinE < 10) {
            hodinStringE = "0" + hodinE;
        }
        String minutStringE = "" + minutE;
        if (minutE < 10) {
            minutStringE = "0" + minutE;
        }
        String sekundStringE = "" + sekundE;
        if (sekundE < 10) {
            sekundStringE = "0" + sekundE;
        }
        //System.out.println("ETA:" + (hodinStringE + ":" + minutStringE + ":" + sekundStringE));
        return (hodinStringE + ":" + minutStringE + ":" + sekundStringE);
    }

    public String getElapsedTime(long startTime) {
        double elapsedTime = ((System.currentTimeMillis() - startTime) / 1000.0);
        int hodinE = (int) ((elapsedTime) / (3600));
        int minutE = (int) ((elapsedTime) / (60));
        int sekundE = (int) ((elapsedTime));
        sekundE %= 60;
        minutE %= 60;
        String hodinStringE = "" + hodinE;
        if (hodinE < 10) {
            hodinStringE = "0" + hodinE;
        }
        String minutStringE = "" + minutE;
        if (minutE < 10) {
            minutStringE = "0" + minutE;
        }
        String sekundStringE = "" + sekundE;
        if (sekundE < 10) {
            sekundStringE = "0" + sekundE;
        }
        //System.out.println("ETA:" + (hodinStringE + ":" + minutStringE + ":" + sekundStringE));
        return (hodinStringE + ":" + minutStringE + ":" + sekundStringE);
    }

    private boolean vyhovujeCheckboxomUloha(int i) {
        if (vybranyUser.statistika[i] == 0 && bielyCheckBox.isSelected()) {
            return true;
        }
        if (vybranyUser.statistika[i] == 1 && zltyCheckBox.isSelected()) {
            return true;
        }
        if (vybranyUser.statistika[i] == 2 && oranzovyCheckBox.isSelected()) {
            return true;
        }
        if (vybranyUser.statistika[i] < 0 && cervenyCheckBox.isSelected()) {
            return true;
        }
        if (vybranyUser.statistika[i] > 2 && zelenyCheckBox.isSelected()) {
            return true;
        }

        return false;
    }

    private void nakresliCiaru(int y, int x, int yp, int xp, BufferedImage obrazok, Color farba, int hrubka) {
        //System.out.println("x:" + x + " y:" + y);
        for (int k = 0; k < hrubka; k++) {
            if (yp == -1) {
                for (int i = 0; i < 8; i++) {
                    obrazok.setRGB(x * 8 + i, y * 8 + k, farba.getRGB());
                }
            }
            if (yp == 1) {
                for (int i = 0; i < 8; i++) {
                    obrazok.setRGB(x * 8 + i, y * 8 + 7 - k, farba.getRGB());
                }
            }
            if (xp == -1) {
                for (int i = 0; i < 8; i++) {
                    obrazok.setRGB(x * 8 + k, y * 8 + i, farba.getRGB());
                }
            }
            if (xp == 1) {
                for (int i = 0; i < 8; i++) {
                    obrazok.setRGB(x * 8 + 7 - k, y * 8 + i, farba.getRGB());
                }
            }
        }
    }

    private boolean niejeSused(int y, int x, int yp, int xp, boolean[][] matica) {
        if (y + yp < 0 || y + yp > 15) {
            return true;
        }
        if (x + xp < 0 || x + xp > 97) {
            return true;
        }
        if (matica[y + yp][x + xp]) {
            return false;
        } else {
            return true;
        }
        // return false;
    }

}
